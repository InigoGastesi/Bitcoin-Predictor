# -*- coding: utf-8 -*-
"""crypto.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UwQsoubcc76HgKUZeOHeUO63sbLq7DGm
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler


PATH = "/content/drive/My Drive/Redes Neuronales/crypto"

df = pd.read_csv('/content/drive/My Drive/Redes Neuronales/crypto/Bitbay_BTCUSD_d.csv', index_col='Date', parse_dates=['Date'])
df.head()
#ds = df.to_numpy()[::-1]


set_entrenamiento = df['2019':].iloc[:,[3]]
set_validacion = df[:'2020'].iloc[:,[3]]

#Reverse arrays
set_entrenamiento = set_entrenamiento[::-1]
set_validacion = set_validacion[::-1]

#Normalize data
sc = MinMaxScaler(feature_range=(0,1))
set_entrenamiento_escalado = sc.fit_transform(set_entrenamiento)

X_train = []
Y_train = []

m=len(set_entrenamiento_escalado)
############Load Data############
for i in range(7, m):
  X_train.append(set_entrenamiento_escalado[i-7:i]) 
  Y_train.append(set_entrenamiento_escalado[i])

X_train, Y_train = np.array(X_train), np.array(Y_train)
############End Data############

from keras.models import Sequential
from keras.layers import Dense, LSTM

dim_entrada = (X_train.shape[1],1)
dim_salida = (Y_train.shape[1],1)

#Neuron number
nn = 50

#Load and fit the NN
modelo = Sequential()
modelo.add(LSTM(units=nn, input_shape=dim_entrada))
modelo.add(Dense(units=1))
modelo.compile(optimizer='rmsprop', loss='mse')
modelo.fit(X_train, Y_train, epochs=20, batch_size=8)

#Testing NN
x_test = set_validacion
x_test = sc.transform(x_test)

X_test = []

for i in range(7,len(x_test)):
    X_test.append(x_test[i-7:i,0])
X_test = np.array(X_test)

X_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))


prediccion = modelo.predict(X_test)
prediccion = sc.inverse_transform(prediccion)

plt.plot(set_validacion,color='red')
plt.show()
plt.plot(prediccion,color='blue')
plt.show()